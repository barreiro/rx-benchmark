description = 'Hibernate Reactive Benchmark'

ext {
    benchmarkVersion = '1.0.0.SNAPSHOT'

    ormVersion = '5.4.17.Final'
    rxVersion = "1.0.0.Alpha4"
}

allprojects {
    if (project.hasProperty('mavenLocal')) {
        repositories {
            mavenLocal()
        }
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    group 'org.hibernate.benchmarks.reactive'
    version '1.0.0-SNAPSHOT'
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "org.hibernate:hibernate-gradle-plugin:5.4.17.Final"
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.8'
    }
}

apply plugin: 'build-dashboard'

apply plugin: 'project-report'

apply plugin: 'java'

dependencies {
    implementation 'org.openjdk.jmh:jmh-core:1.21'

    implementation "org.hibernate.reactive:hibernate-reactive-core:${rxVersion}"

    // JBoss threads, for ORM dispatch
    implementation "org.jboss.threads:jboss-threads:3.1.1.Final"

    // Hibernate Validator (optional)
    implementation 'org.hibernate.validator:hibernate-validator:6.1.5.Final'
    runtimeOnly 'org.glassfish:jakarta.el:3.0.3'

    // JPA metamodel generation for criteria queries (optional)
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${ormVersion}"

    // Agroal connection pool (optional)
    runtimeOnly "org.hibernate:hibernate-agroal:${ormVersion}"

    // database drivers for PostgreSQL
    runtimeOnly 'io.vertx:vertx-pg-client:3.9.1'
    runtimeOnly 'org.postgresql:postgresql:42.2.12'

    // database drivers for MySQL
//    runtimeOnly 'io.vertx:vertx-mysql-client:3.9.1'
//    runtimeOnly 'mysql:mysql-connector-java:8.0.20'

    // logging (optional)
    runtimeOnly 'org.slf4j:slf4j-log4j12:1.7.30'
}

apply plugin: 'org.hibernate.orm'

hibernate {
    enhance {
        enableLazyInitialization = true
        enableDirtyTracking = true
        enableAssociationManagement = false
    }
}

apply plugin: "me.champeau.gradle.jmh"

jmh {
    // for available options, see https://github.com/melix/jmh-gradle-plugin/blob/master/README.adoc#configuration-options
    benchmarkMode = ['avgt']

    // Run either the raw or the dispatch version. Adjust threads accordingly (raw with few threads, dispatch with loads)
    include = ['.*Dispatch']
    threads = 1000 // Number of worker threads to run with. Default 4.

//    exclude = ['.*Dispatch']
//    threads = 1 // Number of worker threads to run with. Default 4.

    fork = 1 // Use 0 to disable forking altogether. Default 2.
    warmupIterations = 5 // Number of warmup iterations to do. Default 1.
    iterations = 10 // Number of measurement iterations to do. Default 10.

    failOnError = false
    timeUnit = 'us' // Output time unit. Available time units are: [m, s, ms, us, ns].
    verbosity = 'NORMAL' // Available modes are: [SILENT, NORMAL, EXTRA]

    jvm = './constrainedJVM.sh' // Comment to run unconstrained
//    jvmArgsPrepend = ['-agentlib:jdwp=transport=dt_socket,server=y,address=*:5005,suspend=y'] // Remote debug
//    jvmArgs = ['-XX:StartFlightRecording=disk=true,dumponexit=true,filename=reactive-benchmark.jfr,settings=profile'] // Java Flight Recorder
//    profilers = ['cl', 'comp', 'gc', 'perfnorm', 'stack']

    def formattedDate = new Date().format('yyyy-MM-dd-HHmmss')

    humanOutputFile = project.file("${buildDir}/reports/jmh/${rxVersion}/human_${formattedDate}.txt")
    resultsFile = project.file("${buildDir}/reports/jmh/${rxVersion}/results_${formattedDate}.txt")
}

task compile {
    description = 'Runs all compilation-related tasks, including processing resources'
    dependsOn compileJava, compileTestJava, processResources, processTestResources
}
